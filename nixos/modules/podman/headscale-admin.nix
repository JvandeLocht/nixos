{
  pkgs,
  lib,
  config,
  ...
}:

{
  options.podman.headscale-admin = {
    enable = lib.mkEnableOption "Enable headscale-admin";
  };

  config = lib.mkIf config.podman.headscale-admin.enable {
    # Runtime
    virtualisation.podman = {
      enable = true;
      autoPrune.enable = true;
      dockerCompat = true;
    };

    # Enable container name DNS for all Podman networks.
    networking.firewall.interfaces =
      let
        matchAll = if !config.networking.nftables.enable then "podman+" else "podman*";
      in
      {
        "${matchAll}".allowedUDPPorts = [ 53 ];
      };

    virtualisation.oci-containers.backend = "podman";

    # Containers
    virtualisation.oci-containers.containers."headscale-admin" = {
      image = "goodieshq/headscale-admin:0.24";
      ports = [
        "8090:80/tcp"
      ];
      log-driver = "journald";
      extraOptions = [
        "--network-alias=headscale-admin"
        "--network=headscale-admin_default"
      ];
    };
    systemd.services."podman-headscale-admin" = {
      serviceConfig = {
        Restart = lib.mkOverride 90 "always";
      };
      after = [
        "podman-network-headscale-admin_default.service"
      ];
      requires = [
        "podman-network-headscale-admin_default.service"
      ];
      partOf = [
        "podman-compose-headscale-admin-root.target"
      ];
      wantedBy = [
        "podman-compose-headscale-admin-root.target"
      ];
    };

    # Networks
    systemd.services."podman-network-headscale-admin_default" = {
      path = [ pkgs.podman ];
      serviceConfig = {
        Type = "oneshot";
        RemainAfterExit = true;
        ExecStop = "podman network rm -f headscale-admin_default";
      };
      script = ''
        podman network inspect headscale-admin_default || podman network create headscale-admin_default
      '';
      partOf = [ "podman-compose-headscale-admin-root.target" ];
      wantedBy = [ "podman-compose-headscale-admin-root.target" ];
    };

    # Root service
    # When started, this will automatically create all resources and start
    # the containers. When stopped, this will teardown all resources.
    systemd.targets."podman-compose-headscale-admin-root" = {
      unitConfig = {
        Description = "Root target generated by compose2nix.";
      };
      wantedBy = [ "multi-user.target" ];
    };
  };
}
